# Byte-compiled / optimized / DLL files# Byte-compiled / optimized / DLL files

__pycache__/__pycache__/

*.py[cod]*.py[cod]

*$py.class*$py.class



# C extensions# C extensions

*.so*.so



# Distribution / packaging# Distribution / packaging

.Python.Python

build/build/

develop-eggs/develop-eggs/

dist/dist/

downloads/downloads/

eggs/eggs/

.eggs/.eggs/

lib/lib/

lib64/lib64/

parts/parts/

sdist/sdist/

var/var/

wheels/wheels/

share/python-wheels/pip-wheel-metadata/

*.egg-info/share/python-wheels/

.installed.cfg*.egg-info/

*.egg.installed.cfg

MANIFEST*.egg

MANIFEST

# PyInstaller

#  Usually these files are written by a python script from a template# PyInstaller

#  before PyInstaller builds the exe, so as to inject date/other infos into it.#  Usually these files are written by a python script from a template

*.manifest#  before PyInstaller builds the exe, so as to inject date/other infos into it.

*.spec*.manifest

*.spec

# Installer logs

pip-log.txt# Installer logs

pip-delete-this-directory.txtpip-log.txt

pip-delete-this-directory.txt

# Unit test / coverage reports

htmlcov/# Unit test / coverage reports

.tox/htmlcov/

.nox/.tox/

.coverage.nox/

.coverage.*.coverage

.cache.coverage.*

nosetests.xml.cache

coverage.xmlnosetests.xml

*.covercoverage.xml

*.py,cover*.cover

.hypothesis/*.py,cover

.pytest_cache/.hypothesis/

cover/.pytest_cache/



# Translations# Translations

*.mo*.mo

*.pot*.pot



# Django stuff:# Django stuff:

*.log*.log

local_settings.pylocal_settings.py

db.sqlite3db.sqlite3

db.sqlite3-journaldb.sqlite3-journal



# Flask stuff:# Flask stuff:

instance/instance/

.webassets-cache.webassets-cache



# Scrapy stuff:# Scrapy stuff:

.scrapy.scrapy



# Sphinx documentation# Sphinx documentation

docs/_build/docs/_build/



# PyBuilder# PyBuilder

.pybuilder/target/

target/

# Jupyter Notebook

# Jupyter Notebook.ipynb_checkpoints

.ipynb_checkpoints

# IPython

# IPythonprofile_default/

profile_default/ipython_config.py

ipython_config.py

# pyenv

# pyenv.python-version

#   For a library or package, you might want to ignore these files since the code is

#   intended to run in multiple environments; otherwise, check them in:# pipenv

# .python-version#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.

#   However, in case of collaboration, if having platform-specific dependencies or dependencies

# pipenv#   having no cross-platform support, pipenv may install dependencies that don't work, or not

#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.#   install all needed dependencies.

#   However, in case of collaboration, if having platform-specific dependencies or dependencies#Pipfile.lock

#   having no cross-platform support, pipenv may install dependencies that don't work, or not

#   install all needed dependencies.# PEP 582; used by e.g. github.com/David-OConnor/pyflow

#Pipfile.lock__pypackages__/



# poetry# Celery stuff

#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.celerybeat-schedule

#   This is especially recommended for binary packages to ensure reproducibility, and is morecelerybeat.pid

#   commonly ignored for libraries.

#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control# SageMath parsed files

#poetry.lock*.sage.py



# pdm# Environments

#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control..env

#pdm.lock.venv

#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include itenv/

#   in version control.venv/

#   https://pdm.fming.dev/#use-with-ideENV/

.pdm.tomlenv.bak/

venv.bak/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm

__pypackages__/# Spyder project settings

.spyderproject

# Celery stuff.spyproject

celerybeat-schedule

celerybeat.pid# Rope project settings

.ropeproject

# SageMath parsed files

*.sage.py# mkdocs documentation

/site

# Environments

.env# mypy

.venv.mypy_cache/

env/.dmypy.json

venv/dmypy.json

ENV/

env.bak/# Pyre type checker

venv.bak/.pyre/



# Spyder project settings# Project specific ignores

.spyderproject# DIS5K dataset folder - contains large training/testing data

.spyprojectIS_Net/DIS5K/



# Rope project settings# OS generated files

.ropeproject.DS_Store

.DS_Store?

# mkdocs documentation._*

/site.Spotlight-V100

.Trashes

# mypyehthumbs.db

.mypy_cache/Thumbs.db

.dmypy.json

dmypy.json# IDE files

.vscode/

# Pyre type checker.idea/

.pyre/*.swp

*.swo

# pytype static type analyzer*~

.pytype/

# Model checkpoints and weights (if any)

# Cython debug symbols*.pth

cython_debug/*.pt

*.ckpt

# PyCharm*.h5

#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can*.pkl

#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm

#  project, it is recommended to ignore these files:# Temporary files

.idea/*.tmp

*.temp

# Dataset folders - DIS5K contains large image datasetstemp/

IS_Net/DIS5K/tmp/



# Model checkpoints and weights (commonly large files)# Log files

*.pth*.log

*.ckptlogs/
*.pt
*.h5
*.pkl
*.pickle

# Output directories
outputs/
results/
logs/
runs/

# Temporary files
*.tmp
*.temp
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
*.swp
*.swo
*~

# Backup files
*.bak
*.orig